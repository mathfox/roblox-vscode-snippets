{
   "assign script-related ModuleScript to a local varible": {
      "prefix": [
         "ams",
         "assign-module-script"
      ],
      "body": [
         "local $1 = script.$1"
      ]
   },
   "assign script-related ModuleScript to a custom named local varible": {
      "prefix": [
         "anms",
         "assign-named-module-script"
      ],
      "body": [
         "local ${2:$1} = script.$1"
      ]
   },
   "assign required script-related ModuleScript to a local variable": {
      "prefix": [
         "arms",
         "assign-required-module-script"
      ],
      "body": [
         "local $1 = require(script.$1)"
      ]
   },
   "assign required script-related ModuleScript to a custom named local variable": {
      "prefix": [
         "anrms",
         "assign-named-required-module-script"
      ],
      "body": [
         "local ${2:$1} = require(script.$1)"
      ]
   },
   "assign script-related ModuleScript to a table field": {
      "prefix": [
         "tams",
         "table-assign-module-script"
      ],
      "body": [
         "$1 = script.$1,"
      ]
   },
   "assign script-related ModuleScript to a custom named table field": {
      "prefix": [
         "tanms",
         "table-assign-named-module-script"
      ],
      "body": [
         "${2:$1} = script.$1,"
      ]
   },
   "assign required script-related ModuleScript to a table field": {
      "prefix": [
         "tarms",
         "table-assign-required-module-script"
      ],
      "body": [
         "$1 = require(script.$1),"
      ]
   },
   "assign required script-related ModuleScript to a custom named table field": {
      "prefix": [
         "tanrms",
         "table-assign-named-required-module-script"
      ],
      "body": [
         "${2:$1} = require(script.$1),"
      ]
   },
   "assign script.Parent-related ModuleScript to a local variable": {
      "prefix": [
         "pams",
         "parent-assign-module-script"
      ],
      "body": [
         "local $1 = script.Parent.$1"
      ]
   },
   "assign script.Parent-related ModuleScript to a custom named local variable": {
      "prefix": [
         "panms",
         "parent-assign-named-module-script"
      ],
      "body": [
         "local ${2:$1} = script.Parent.$1"
      ]
   },
   "assign required script.Parent-related ModuleScript to a local variable": {
      "prefix": [
         "parms",
         "parent-assign-required-module-script"
      ],
      "body": [
         "local $1 = require(script.Parent.$1)"
      ]
   },
   "assign required script.Parent-related ModuleScript to a custom named local variable": {
      "prefix": [
         "panrms",
         "parent-assign-named-required-module-script"
      ],
      "body": [
         "local ${2:$1} = require(script.Parent.$1)"
      ]
   },
   "assign script.Parent.Parent-related ModuleScript to a local variable": {
      "prefix": [
         "ppams",
         "parent-parent-assign-module-script"
      ],
      "body": [
         "local $1 = script.Parent.Parent.$1"
      ]
   },
   "assign script.Parent.Parent-related ModuleScript to a custom named local variable": {
      "prefix": [
         "ppanms",
         "parent-parent-assign-named-module-script"
      ],
      "body": [
         "local ${2:$1} = script.Parent.Parent.$1"
      ]
   },
   "assign required script.Parent.Parent-related ModuleScript to a local variable": {
      "prefix": [
         "pparms",
         "parent-parent-assign-required-module-script"
      ],
      "body": [
         "local $1 = require(script.Parent.Parent.$1)"
      ]
   },
   "assign required script.Parent.Parent-related ModuleScript to a custom named local variable": {
      "prefix": [
         "ppanrms",
         "parent-parent-assign-named-required-module-script"
      ],
      "body": [
         "local ${2:$1} = require(script.Parent.Parent.$1)"
      ]
   },
   "assign script.Parent.Parent.Parent-related ModuleScript to a local variable": {
      "prefix": [
         "pppams",
         "parent-parent-parent-assign-module-script"
      ],
      "body": [
         "local $1 = script.Parent.Parent.Parent.$1"
      ]
   },
   "assign script.Parent.Parent.Parent-related ModuleScript to a custom named local variable": {
      "prefix": [
         "pppanms",
         "parent-parent-parent-assign-named-module-script"
      ],
      "body": [
         "local ${2:$1} = script.Parent.Parent.Parent.$1"
      ]
   },
   "assign required script.Parent.Parent.Parent-related ModuleScript to a local variable": {
      "prefix": [
         "ppparms",
         "parent-parent-parent-assign-required-module-script"
      ],
      "body": [
         "local $1 = require(script.Parent.Parent.Parent.$1)"
      ]
   },
   "assign required script.Parent.Parent.Parent-related ModuleScript to a custom named local variable": {
      "prefix": [
         "pppanrms",
         "parent-parent-parent-assign-named-required-module-script"
      ],
      "body": [
         "local ${2:$1} = require(script.Parent.Parent.Parent.$1)"
      ]
   },
   "assign Roblox service to a local variable": {
      "prefix": [
         "as",
         "assign-service"
      ],
      "body": [
         "local $1 = game:GetService(\"$1\")"
      ]
   },
   "assign Roblox service to a custom named local variable": {
      "prefix": [
         "ans",
         "assign-named-service"
      ],
      "body": [
         "local ${2:$1} = game:GetService(\"$1\")"
      ]
   },
   "insert UDim2.fromScale": {
      "prefix": [
         "scale"
      ],
      "body": [
         "UDim2.fromScale(0$1, 0$2)${3:,}$0"
      ]
   },
   "insert Roact element without comma": {
      "prefix": [
         "element",
         "roact-element"
      ],
      "body": [
         "Roact.createElement($0)"
      ]
   },
   "insert Roact element with comma": {
      "prefix": [
         "celement",
         "comma-roact-element"
      ],
      "body": [
         "Roact.createElement($0),"
      ]
   },
   "create Roact ref": {
      "prefix": [
         "createRef",
         "roact-createRef"
      ],
      "body": [
         "Roact.createRef()${1:,}$0"
      ]
   },
   "insert UIAspectRatioConstraint": {
      "prefix": [
         "aratio",
         "roact-aspect-ratio"
      ],
      "body": [
         "Roact.createElement(\"UIAspectRatioConstraint\"$0),"
      ]
   },
   "assign Roact.Ref": {
      "prefix": [
         "ref",
         "roact-ref"
      ],
      "body": [
         "[Roact.Ref] = self.$0"
      ]
   },
   "assign Roact.Event": {
      "prefix": [
         "event",
         "roact-event"
      ],
      "body": [
         "[Roact.Event.${1|Activated,InputBegan,InputChanged,InputEnded,MouseButton1Click,MouseButton1Down,MouseButton1Up,MouseButton2Click,MouseButton2Down,MouseButton2Up|}] = $0"
      ]
   },
   "insert Roact.Component init method": {
      "prefix": [
         "init"
      ],
      "body": [
         "function ${1:$TM_FILENAME_BASE}:init()\n\t$0\nend"
      ]
   },
   "insert Roact.Component render method": {
      "prefix": [
         "render",
         "roact-render"
      ],
      "body": [
         "function ${1:$TM_FILENAME_BASE}:render()\n\treturn $0\nend"
      ]
   },
   "insert Roact.Component didMount method": {
      "prefix": [
         "didMount",
         "roact-didMount"
      ],
      "body": [
         "function ${1:$TM_FILENAME_BASE}:didMount()\n\t$0\nend"
      ]
   },
   "insert Roact.Component willUnmount method": {
      "prefix": [
         "willUnmount",
         "roact-willUnmount"
      ],
      "body": [
         "function ${1:$TM_FILENAME_BASE}:willUnmount()\n\t$0\nend"
      ]
   },
   "insert new Roact Component": {
      "prefix": [
         "nrc",
         "new-roact-component"
      ],
      "body": [
         "local ${1:$TM_FILENAME_BASE} = Roact.Component:extend(\"${1:$TM_FILENAME_BASE}\")\n",
         "function ${1:$TM_FILENAME_BASE}:render()\n\treturn $0\nend",
         "return ${1:$TM_FILENAME_BASE}"
      ]
   },
   "insert Roact-Rodux Component": {
      "prefix": [
         "rrc",
         "roact-rodux-component"
      ],
      "body": [
         "local ${1:$TM_FILENAME_BASE} = Roact.Component:extend(\"${1:$TM_FILENAME_BASE}\")\n",
         "function ${1:$TM_FILENAME_BASE}:render()\n\treturn $0\nend\n",
         "local function mapStateToProps(storeState, props)\n\treturn {}\nend\n",
         "local function mapDispatchToProps(dispatch)\n\treturn {}\nend\n",
         "return RoactRodux.connect(mapStateToProps, mapDispatchToProps)(${1:$TM_FILENAME_BASE})"
      ]
   }
}