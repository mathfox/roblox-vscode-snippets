{
    "require script-related ModuleScript": {
        "prefix": [
            "sreq"
        ],
        "body": [
            "local $1 = require(script.$1)$0"
        ]
    },
    "insert Roblox Service": {
        "prefix": [
            "service"
        ],
        "body": [
            "local $1 = game:GetService(\"$1\")$0"
        ]
    },
    "insert Unite service": {
        "prefix": [
            "uniteService"
        ],
        "body": [
            "local $0 = Unite.getService(\"$0\")"
        ]
    },
    "insert Unite controller": {
        "prefix": [
            "uniteController"
        ],
        "body": [
            "local $0 = Unite.getController(\"$0\")"
        ]
    },
    "insert Unite framework": {
        "prefix": [
            "unite"
        ],
        "body": [
            "local Unite = require(game:GetService(\"ReplicatedStorage\").Unite)"
        ]
    },
    "insert Shared util": {
        "prefix": [
            "utilShared"
        ],
        "body": [
            "local $0 = Unite.getSharedUtil(\"$0\")"
        ]
    },
    "insert Server util": {
        "prefix": [
            "utilServer"
        ],
        "body": [
            "local $0 = Unite.getServerUtil(\"$0\")"
        ]
    },
    "insert Client util": {
        "prefix": [
            "utilClient"
        ],
        "body": [
            "local $0 = Unite.getClientUtil(\"$0\")"
        ]
    },
    "insert Shared module": {
        "prefix": [
            "moduleShared"
        ],
        "body": [
            "local $0 = Unite.getSharedModule(\"$0\")"
        ]
    },
    "insert Server Module": {
        "prefix": [
            "moduleServer"
        ],
        "body": [
            "local $0 = Unite.getServerModule(\"$0\")"
        ]
    },
    "insert Client module": {
        "prefix": [
            "moduleClient"
        ],
        "body": [
            "local $0 = Unite.getClientModule(\"$0\")"
        ]
    },
    "insert UDim2.fromScale": {
        "prefix": [
            "scale"
        ],
        "body": [
            "UDim2.fromScale(0$1, 0$2)${3:,}$0"
        ]
    },
    "insert Roact element": {
        "prefix": [
            "element"
        ],
        "body": [
            "Roact.createElement($1)${2:,}$0"
        ]
    },
    "create Roact ref": {
        "prefix": [
            "createRef"
        ],
        "body": [
            "Roact.createRef()${1:,}$0"
        ]
    },
    "insert UIAspectRatioConstraint": {
        "prefix": [
            "ratio"
        ],
        "body": [
            "Roact.createElement(\"UIAspectRatioConstraint\"$0),"
        ]
    },
    "assign Roact.Ref": {
        "prefix": [
            "ref"
        ],
        "body": [
            "[Roact.Ref] = self.$0"
        ]
    },
    "assign Roact.Event": {
        "prefix": [
            "event"
        ],
        "body": [
            "[Roact.Event.${1|Activated,InputBegan,InputChanged,InputEnded,MouseButton1Click,MouseButton1Down,MouseButton1Up,MouseButton2Click,MouseButton2Down,MouseButton2Up|}] = $0"
        ]
    },
    "Roact Component render method": {
        "prefix": [
            "render"
        ],
        "body": [
            "function ${1:$TM_FILENAME_BASE}:render()",
            "\treturn $0",
            "end"
        ]
    },
    "Roact init method": {
        "prefix": [
            "init"
        ],
        "body": [
            "function ${1:$TM_FILENAME_BASE}:init()",
            "\t$0",
            "end"
        ]
    },
    "Roact Component didMount method": {
        "prefix": [
            "render"
        ],
        "body": [
            "function ${1:$TM_FILENAME_BASE}:didMount()",
            "\t$0",
            "end"
        ]
    },
    "Roact Component": {
        "prefix": [
            "rc"
        ],
        "body": [
            "local ${1:$TM_FILENAME_BASE} = Roact.Component:extend(\"${1:$TM_FILENAME_BASE}\")\n",
            "function ${1:$TM_FILENAME_BASE}:render()",
            "\treturn $0",
            "end\n",
            "return ${1:$TM_FILENAME_BASE}"
        ]
    },
    "Roact-Rodux Component": {
        "prefix": [
            "rdc"
        ],
        "body": [
            "local ${1:$TM_FILENAME_BASE} = Roact.Component:extend(\"${1:$TM_FILENAME_BASE}\")\n",
            "function ${1:$TM_FILENAME_BASE}:render()",
            "\treturn $0",
            "end\n",
            "local function mapStateToProps(storeState, props)",
            "\treturn {}",
            "end\n",
            "local function mapDispatchToProps(dispatch)",
            "\treturn {}",
            "end\n",
            "return RoactRodux.connect(mapStateToProps, mapDispatchToProps)(${1:$TM_FILENAME_BASE})"
        ]
    }
}